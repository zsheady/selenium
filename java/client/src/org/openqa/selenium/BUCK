load("//java:version.bzl", "SE_VERSION")
load("//java:rules.bzl", "java_library")

java_library(
    name = "selenium",
    exported_deps = [
        ":core",
        "//java/client/src/org/openqa/selenium/io:io",
        "//java/client/src/org/openqa/selenium/net:net",
        "//java/client/src/org/openqa/selenium/os:os",
    ],
    visibility = ["PUBLIC"],
)

export_file(
    name = "template-pom",
    src = "pom.xml",
    out = "pom.xml",
    visibility = ["PUBLIC"],
)

java_library(
    name = "core",
    maven_coords = "org.seleniumhq.selenium:selenium-api:" + SE_VERSION,
    maven_pom_template = ":template-pom",
    module_info = "module-info.txt",
    srcs = glob([
        "*.java",
        "html5/*.java",
        "internal/*.java",
        "interactions/**/*.java",
        "logging/**/*.java",
        "mobile/*.java",
    ]),
    manifest_file = ":manifest",
    deps = [
        # Nothing from third party
    ],
    visibility = [
        "PUBLIC",
    ],
)

genrule(
    name = "manifest",
    out = "manifest.mf",
    cmd = 'python -c "print(\'\\n\\nName: Build-Info\\nSelenium-Version: {}\\n\\n\')" >> $OUT'.format(SE_VERSION),
)

java_library(
    name = "client-combined",
    maven_coords = "org.seleniumhq.selenium:selenium-java:" + SE_VERSION,
    maven_pom_template = ":template-pom",
    exported_deps = [
        ":selenium",
        "//java/client/src/org/openqa/selenium/chrome:chrome",
        "//java/client/src/org/openqa/selenium/firefox:firefox",
        "//java/client/src/org/openqa/selenium/firefox/xpi:firefox-xpi",
        "//java/client/src/org/openqa/selenium/edge/edgehtml:edgehtml",
        "//java/client/src/org/openqa/selenium/ie:ie",
        "//java/client/src/org/openqa/selenium/opera:opera",
        "//java/client/src/org/openqa/selenium/remote:remote",
        "//java/client/src/org/openqa/selenium/safari:safari",
        "//java/client/src/org/openqa/selenium/support:support",
    ],
    visibility = [
        "//java/server/test/org/openqa/selenium:lib",
    ],
)

# This isn't very elegant, but we can build a dist zip like this:
zip_file(
    name = "client-combined-zip",
    out = "selenium-java-" + SE_VERSION + ".zip",
    srcs = [
        ":client-combined-" + SE_VERSION,
        ":client-combined-source-zip",
        ":client-libs",
        "//java:changelog",
        "//:notice",
        "//:license",
    ],
)

# The jar file containing merged first party code
java_binary(
    name = "client-combined-" + SE_VERSION,
    blacklist = [
        "^(?!com.thoughtworks.selenium.*|org.openqa.selenium.*)",
    ],
    deps = [
        ":client-combined",
    ],
)

# The first party source, as a source jar which we don't want merged
genrule(
    name = "client-combined-sources",
    out = "client-combined-" + SE_VERSION + "-sources.jar",
    cmd = 'mkdir temp && $(exe //java/client/src/org/openqa/selenium/tools:package) $OUT $(@query_paths "inputs(kind(java_library, deps(//java/client/src/org/openqa/selenium:client-combined) - deps(//java/client/src/org/openqa/selenium/tools:package, 1)))")',
)

# So we hide it in another zip file, which will be merged. Zip file merging isn't recursive.
zip_file(
    name = "client-combined-source-zip",
    out = "selenium-java-sources.jar",
    merge_source_zips = False,
    srcs = [
        ":client-combined-sources",
    ],
)

# The third party libraries we depend on, as a source jar for merging
genrule(
    name = "client-libs",
    out = "libs-sources.jar",
    bash = 'mkdir libs && python -c "import sys,shutil;map(lambda f:shutil.copy(f,\'libs\'),[l for l in open(sys.argv[1][1:]).read().strip(\'\\\'\').split(\':\') if l.endswith(\'.jar\') and \'third_party/java\' in l])" $(@classpath :client-combined) && jar cMf $OUT libs/*',
    cmd_exe = 'mkdir libs && python -c "import sys,shutil;map(lambda f:shutil.copy(f,\'libs\'),[l for l in open(sys.argv[1][1:]).read().strip(\'\\\'\').split(\';\') if l.endswith(\'.jar\') and \'third_party\\java\' in l])" $(@classpath :client-combined) && jar cMf $OUT libs/*',
)
