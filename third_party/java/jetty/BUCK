load("//java:rules.bzl", "java_library")

JETTY_VERSION = "9.4.19.v20190610"
MAVEN_VERSION = "%s.1" % JETTY_VERSION

java_library(
    name = "jetty",
    maven_coords = "org.seleniumhq.selenium:jetty-repacked:%s" % MAVEN_VERSION,
    maven_pom_template = "jetty.pom",
    module_info = "module-info.txt",
    exported_deps = [
        ":repackage",
    ],
    deps = [
        "//third_party/java/servlet:javax.servlet-api",
        "//third_party/java/slf4j:slf4j-api",
    ],
    visibility = [
        "//java/client/test/com/thoughtworks/selenium:tests",
        "//java/client/test/org/openqa/selenium:tests",
        "//java/client/test/org/openqa/selenium/environment:environment",
        "//java/client/test/org/openqa/selenium/remote:",
        "//java/server/src/org/openqa/selenium/grid/server:server",
        "//java/server/src/org/openqa/selenium/remote/server:standalone-server-lib",
        "//java/server/src/org/openqa/selenium/server/htmlrunner:htmlrunner",
        "//java/server/test/org/openqa/selenium:lib",
        "//java/server/test/com/thoughtworks/selenium/webdriven:webdriven",
        "//java/server/test/org/openqa/selenium/remote/server:tests",
        "//java/server/test/org/openqa/selenium/remote/server/auth:lib",
    ],
)

# We want the deployable 'jetty-repacked' artifact to not require each of the
# individual jars (we did, after all, repackage everything). By introducing a
# prebuilt_jar we avoid that problem.
prebuilt_jar(
    name = "repackage",
    binary_jar = ":move-services",
)

genrule(
    name = "move-services",
    out = "moved-bundle.jar",
    cmd = "mkdir tmp && cd tmp && jar xf $(location :bundle-jars) && rm -rf META-INF/services/* && echo org.seleniumhq.jetty9.http.Http1FieldPreEncoder > META-INF/services/org.seleniumhq.jetty9.http.HttpFieldPreEncoder && jar cvf $OUT *",
    cmd_exe = "md tmp && cd tmp && jar xf $(location :bundle-jars) && del META-INF/services/* && echo org.seleniumhq.jetty9.http.Http1FieldPreEncoder > META-INF\\services\\org.seleniumhq.jetty9.http.HttpFieldPreEncoder && jar cvf $OUT *",
)


java_binary(
    name = "bundle-jars",
    deps = [
        ":jetty-http-repacked",
        ":jetty-io-repacked",
        ":jetty-jmx-repacked",
        ":jetty-security-repacked",
        ":jetty-server-repacked",
        ":jetty-servlet-repacked",
        ":jetty-util-repacked",
        ":jetty-xml-repacked",
    ],
)

REPACK = [
    "jetty-client",
    "jetty-http",
    "jetty-io",
    "jetty-jmx",
    "jetty-security",
    "jetty-server",
    "jetty-servlet",
    "jetty-util",
    "jetty-xml",
]

[genrule(
    name = "%s-do-repack" % i,
    out = "%s-repacked.jar" % i,
    cmd = "$(exe //third_party/java/pantsbuild:jarjar-links) process $(location :jarjar-rules) $(location :%s) $OUT" % i,
) for i in REPACK]

[prebuilt_jar(
    name = "%s-repacked" % i,
    maven_coords = "org.seleniumhq.selenium:%s:%s" % ("%s-repacked" % i, JETTY_VERSION),
    binary_jar = ":%s-do-repack" % i,
) for i in REPACK]

export_file(
    name = "jarjar-rules",
    src = "jetty-repack-rules",
    visibility = [
        "//third_party/java/websocket:",
    ],
)

prebuilt_jar(
    name = "jetty-client",
    maven_coords = "org.eclipse.jetty:jetty-client:jar:9.4.19.v20190610",
    binary_jar = "jetty-client-9.4.19.v20190610.jar",
    source_jar = "jetty-client-9.4.19.v20190610-sources.jar",
    deps = [
        ":jetty-http",
        ":jetty-io",
    ],
    visibility = [
        "//third_party/java/websocket:",
    ],
)

prebuilt_jar(
    name = "jetty-http",
    maven_coords = "org.eclipse.jetty:jetty-http:jar:9.4.19.v20190610",
    binary_jar = "jetty-http-9.4.19.v20190610.jar",
    source_jar = "jetty-http-9.4.19.v20190610-sources.jar",
    deps = [
        ":jetty-io",
        ":jetty-util",
    ],
)

prebuilt_jar(
    name = "jetty-io",
    maven_coords = "org.eclipse.jetty:jetty-io:jar:9.4.19.v20190610",
    binary_jar = "jetty-io-9.4.19.v20190610.jar",
    source_jar = "jetty-io-9.4.19.v20190610-sources.jar",
    deps = [
        ":jetty-util",
    ],
    visibility = [
        "//third_party/java/websocket:",
    ],
)

prebuilt_jar(
    name = "jetty-jmx",
    maven_coords = "org.eclipse.jetty:jetty-jmx:jar:9.4.19.v20190610",
    binary_jar = "jetty-jmx-9.4.19.v20190610.jar",
    source_jar = "jetty-jmx-9.4.19.v20190610-sources.jar",
    deps = [
        ":jetty-util",
    ],
)

prebuilt_jar(
    name = "jetty-security",
    maven_coords = "org.eclipse.jetty:jetty-security:jar:9.4.19.v20190610",
    binary_jar = "jetty-security-9.4.19.v20190610.jar",
    source_jar = "jetty-security-9.4.19.v20190610-sources.jar",
    deps = [
        ":jetty-server",
    ],
)

prebuilt_jar(
    name = "jetty-server",
    maven_coords = "org.eclipse.jetty:jetty-server:jar:9.4.19.v20190610",
    binary_jar = "jetty-server-9.4.19.v20190610.jar",
    source_jar = "jetty-server-9.4.19.v20190610-sources.jar",
    deps = [
        ":jetty-http",
        ":jetty-io",
        ":jetty-jmx",
        "//third_party/java/servlet:javax.servlet-api",
    ],
)

prebuilt_jar(
    name = "jetty-servlet",
    maven_coords = "org.eclipse.jetty:jetty-servlet:jar:9.4.19.v20190610",
    binary_jar = "jetty-servlet-9.4.19.v20190610.jar",
    source_jar = "jetty-servlet-9.4.19.v20190610-sources.jar",
    deps = [
        ":jetty-jmx",
        ":jetty-security",
    ],
)

prebuilt_jar(
    name = "jetty-util",
    maven_coords = "org.eclipse.jetty:jetty-util:jar:9.4.19.v20190610",
    binary_jar = "jetty-util-9.4.19.v20190610.jar",
    source_jar = "jetty-util-9.4.19.v20190610-sources.jar",
    deps = [
        "//third_party/java/servlet:javax.servlet-api",
    ],
    visibility = [
        "//third_party/java/websocket:",
    ],
)

prebuilt_jar(
    name = "jetty-xml",
    maven_coords = "org.eclipse.jetty:jetty-xml:jar:9.4.19.v20190610",
    binary_jar = "jetty-xml-9.4.19.v20190610.jar",
    source_jar = "jetty-xml-9.4.19.v20190610-sources.jar",
    deps = [
        ":jetty-util",
    ],
    visibility = [
        "//third_party/java/websocket:websocket-client",
    ],
)
